# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type FieldError {
  constraints: [String!]
  field: String
  message: String
}

type Like {
  createdAt: DateTime!
  id: String!
  post: Post!
  postID: String!
  user: User!
  userID: String!
}

type LoginResponse {
  accessToken: String!
  errors: [FieldError!]
  refreshToken: String!
}

type Media {
  createdAt: DateTime!
  creator: User!
  creatorID: String!
  id: String!
  mediaIndex: Int
  mediaType: MediaTypes!
  mediaURL: String!
  post: Post!
  postID: String!
}

"""Object describing a piece of media content"""
scalar MediaScalar

"""List of media types"""
enum MediaTypes {
  PHOTO
  VIDEO
}

type Mutation {
  checkEmail(options: UserCheckEmailScreenNameInputs!): UserResponse!
  createPost(options: PostCreateInput!): PostResponse!
  deletePost(id: String!): Boolean!
  deleteUser(id: String!): Boolean!
  login(options: UserLoginInput!): LoginResponse!
  logout: Boolean!
  register(options: UserRegisterInput!): RegisterResponse!
  updateUser(id: String!, options: UserUpdateInput!): Boolean!
}

"""A set of coordinates. x, y"""
scalar Point

type Post {
  coordinates: Point!
  createdAt: DateTime!
  creator: User!
  creatorID: String!
  id: String!
  likeCount: Int
  likes: [Like!]!
  media: [Media!]!
  replies: [PostReply!]!
  replyCount: Int
  text: String
}

input PostCreateInput {
  coordinates: Point!
  media: [MediaScalar!]
  placeID: String!
  text: String!
}

type PostReply {
  createdAt: DateTime!
  creator: User!
  creatorID: String!
  id: String!
  parentReply: PostReply!
  parentReplyId: String
  post: Post!
  postID: String!
  replies: [PostReply!]!
  totalReplies: Int
}

type PostResponse {
  errors: [FieldError!]
  post: Post
}

type Query {
  me: User
  posts: [Post!]!
  user(id: Int!): User!
  users: [User!]!
}

type RegisterResponse {
  accessToken: String!
  errors: [FieldError!]
  refreshToken: String!
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  hasTempPassword: Boolean
  id: String!
  lastActiveAt: DateTime!
  lastName: String!
  likes: [Like!]!
  media: [Media!]!
  posts: [Post!]!
  profilePic: String
  role: UserRoles
  screenName: String!
  status: UserStatuses
  tempPasswordExpires: DateTime
  totalFollowers: Int
  totalFollowing: Int
  totalFollowingPlaces: Int
  totalLikes: Int
  totalPosts: Int
  userType: UserTypes
  verified: Boolean
}

input UserCheckEmailScreenNameInputs {
  email: String!
  screenName: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserRegisterInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  repassword: String!
  screenName: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

"""List of user roles"""
enum UserRoles {
  ADMIN
  BASIC
  GOD
}

"""List of user statuses"""
enum UserStatuses {
  ACTIVE
  ARCHIVE
  DEACTIVATED
  INACTIVE
  INVITED
}

"""List of user types"""
enum UserTypes {
  CELEBRITY
  GOVERNMENT_OFFICIAL
  STANDARD
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
}
