# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  city: String!
  countryCode: String!
  countryName: String!
  county: String!
  district: String!
  houseNumber: String!
  id: Float!
  places: [Place!]
  postalCode: String!
  state: String!
  stateCode: String!
  street: String!
}

input AddressInput {
  city: String!
  countryCode: String!
  countryName: String!
  county: String
  district: String
  houseNumber: String!
  postalCode: String!
  state: String!
  stateCode: String!
  street: String!
}

input Coordinates {
  lat: Float!
  lon: Float!
}

input CreatePlaceInput {
  address: AddressInput
  coords: Coordinates
  name: String!
  placeType: PlaceTypes!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type FieldError {
  constraints: [String!]
  field: String
  message: String
}

input GetPlaceInfoInput {
  id: Int!
  includes: PlaceIncludes
}

type Like {
  createdAt: DateTime!
  id: Int!
  post: Post!
  postID: Int!
  user: User!
  userID: Int!
}

type Location {
  accessPoints: String
  bbox: String
  createdAt: DateTime!
  geoCellRes0: String!
  geoCellRes1: String!
  geoCellRes2: String!
  geoCellRes3: String!
  geoCellRes4: String!
  geoCellRes5: String!
  geoCellRes6: String!
  geoCellRes7: String!
  geoCellRes8: String!
  geoCellRes9: String!
  geoCellRes10: String!
  geoCellRes11: String!
  geoCellRes12: String!
  geoCellRes13: String!
  geoCellRes14: String!
  geoCellRes15: String!
  id: Int!
  lat: Float!
  locationType: LocationTypes!
  lon: Float!
  places: [Place!]
  posts: [Post!]
  primaryCellLevel: Int
  updatedAt: DateTime!
  users: [User!]
}

input LocationInput {
  cell: String
  coords: Coordinates
}

"""LocationTypes"""
enum LocationTypes {
  Place
  User
}

type LoginResponse {
  accessToken: String
  errors: [FieldError!]
  refreshToken: String
}

type Media {
  createdAt: DateTime!
  creator: User!
  creatorID: String!
  id: String!
  mediaIndex: Int
  mediaType: MediaTypes!
  mediaURL: String!
  post: Post!
  postID: String!
}

"""Object describing a piece of media content"""
scalar MediaScalar

enum MediaTypes {
  AUDIO
  MODEL
  PHOTO
  VIDEO
}

type Mutation {
  checkEmail(options: UserCheckEmailScreenNameInputs!): UserResponse!
  createPlace(placeData: CreatePlaceInput!): PlaceResponse!
  createPost(options: PostCreateInput!): PostResponse!
  deletePost(id: Int!): Boolean!
  deleteUser(id: Int!): Boolean!
  login(options: UserLoginInput!): LoginResponse!
  logout: Boolean!
  register(options: UserRegisterInput!): RegisterResponse!
  updatePlace(placeData: CreatePlaceInput!): PlacesResponse!
  updateUser(id: Int!, options: UserUpdateInput!): Boolean!
}

type Organization {
  id: Int!
  name: String!
  places: [Place!]
}

type Place {
  address: Address
  addressID: Int
  categories: String
  children: [Place!]
  contacts: String
  createdAt: DateTime!
  hours: String
  id: Float!
  language: String!
  location: Location
  locationID: Int
  name: String!
  organization: Organization
  organizationID: Int
  parent: Place
  parentID: Int
  peopleHere: Float
  placeType: PlaceTypes!
  references: String
  updatedAt: DateTime!
  visitorHistory: [UserVisitHistory!]
}

input PlaceIncludes {
  address: Boolean
  location: Boolean
}

type PlaceResponse {
  errors: [FieldError!]
  place: Place
}

enum PlaceTypes {
  Administrative
  Commercial
  Community
  Continent
  Country
  Educational
  Geographic
  Landmark
  Medical
  Municipality
  Province
  Religious
  Residential
  State
  Transit
}

type PlacesResponse {
  errors: [FieldError!]
  places: [Place!]
}

"""A set of coordinates. x, y"""
scalar Point

type Post {
  author: User!
  authorID: Int!
  cell: Location
  cellID: Int
  createdAt: DateTime!
  id: Int!
  likeCount: Int
  likes: [Like!]
  media: [Media!]
  replies: [PostReply!]
  replyCount: Int
  text: String
}

input PostCreateInput {
  coordinates: Point!
  media: [MediaScalar!]
  placeID: String!
  text: String
}

type PostReply {
  createdAt: DateTime!
  creator: User!
  creatorID: String!
  id: String!
  parentReply: PostReply!
  parentReplyId: String
  post: Post!
  postID: String!
  replies: [PostReply!]!
  totalReplies: Int
}

type PostResponse {
  errors: [FieldError!]
  post: Post
}

type Query {
  getHereInfo(options: LocationInput!): PlacesResponse!
  getNearInfo(options: LocationInput!): PlacesResponse!
  getPlaceInfo(options: GetPlaceInfoInput!): PlacesResponse!
  getPlacesFromLocation(location: LocationInput!): PlacesResponse!
  me: User
  myPosts: [Post!]!
  user(id: Int!): User!
  users: [User!]!
}

type RegisterResponse {
  accessToken: String
  errors: [FieldError!]
  refreshToken: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  hasTempPassword: Boolean
  id: Int!
  isVerified: Boolean
  lastActiveAt: DateTime!
  lastName: String!
  likes: [Like!]
  location: Location
  locationID: Int
  locationPath: [UserLocationPath!]
  media: [Media!]
  posts: [Post!]
  profilePic: String
  role: UserRoles
  screenName: String!
  status: UserStatuses
  tempPasswordExpires: DateTime
  totalFollowers: Int
  totalFollowing: Int
  totalFollowingPlaces: Int
  totalLikes: Int
  totalPosts: Int
  verificationType: UserVerifications
  visitHistory: [UserVisitHistory!]
}

input UserCheckEmailScreenNameInputs {
  email: String!
  screenName: String!
}

type UserLocationPath {
  id: Int!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserRegisterInput {
  email: String!
  firstName: String!
  lastName: String!
  lat: Float!
  lon: Float!
  password: String!
  repassword: String!
  screenName: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

enum UserRoles {
  ADMIN
  USER
}

enum UserStatuses {
  ACTIVE
  ARCHIVE
  DEACTIVATED
  INACTIVE
  INVITED
  REMOVED
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
}

enum UserVerifications {
  CELEBRITY
  DEVELOPER
  OFFICIAL
  STANDARD
}

type UserVisitHistory {
  id: Int!
}
