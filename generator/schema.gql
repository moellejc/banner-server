# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type FieldError {
  constraints: [String!]
  field: String
  message: String
}

type Like {
  createdAt: DateTime!
  id: Int!
  post: Post!
  postID: Int!
  user: User!
  userID: Int!
}

type LocationCell {
  createdAt: DateTime!
  geoCellRes1: String!
  geoCellRes2: String!
  geoCellRes3: String!
  geoCellRes4: String!
  geoCellRes5: String!
  geoCellRes6: String!
  geoCellRes7: String!
  geoCellRes8: String!
  geoCellRes9: String!
  geoCellRes10: String!
  geoCellRes11: String!
  geoCellRes12: String!
  geoCellRes13: String!
  geoCellRes14: String!
  geoCellRes15: String!
  id: Int!
  lat: Float!
  lon: Float!
  places: [Place!]
  posts: [Post!]
  users: [User!]
}

type LoginResponse {
  accessToken: String
  errors: [FieldError!]
  refreshToken: String
}

type Media {
  createdAt: DateTime!
  creator: User!
  creatorID: String!
  id: String!
  mediaIndex: Int
  mediaType: MediaTypes!
  mediaURL: String!
  post: Post!
  postID: String!
}

"""Object describing a piece of media content"""
scalar MediaScalar

enum MediaTypes {
  AUDIO
  MODEL
  PHOTO
  VIDEO
}

type Mutation {
  checkEmail(options: UserCheckEmailScreenNameInputs!): UserResponse!
  createPost(options: PostCreateInput!): PostResponse!
  deletePost(id: Int!): Boolean!
  deleteUser(id: Int!): Boolean!
  login(options: UserLoginInput!): LoginResponse!
  logout: Boolean!
  register(options: UserRegisterInput!): RegisterResponse!
  updateUser(id: Int!, options: UserUpdateInput!): Boolean!
}

type Place {
  cell: LocationCell
  cellID: Int
  city: String!
  countryCode: String!
  countryName: String!
  county: String!
  createdAt: DateTime!
  id: Float!
  name: String!
  peopleHere: Float!
  postalCode: String!
  state: String!
  stateCode: String!
  street: String!
  streetNum: String!
}

"""A set of coordinates. x, y"""
scalar Point

type Post {
  author: User!
  authorID: Int!
  cell: LocationCell
  cellID: Int
  createdAt: DateTime!
  id: Int!
  likeCount: Int
  likes: [Like!]
  media: [Media!]
  replies: [PostReply!]
  replyCount: Int
  text: String
}

input PostCreateInput {
  coordinates: Point!
  media: [MediaScalar!]
  placeID: String!
  text: String
}

type PostReply {
  createdAt: DateTime!
  creator: User!
  creatorID: String!
  id: String!
  parentReply: PostReply!
  parentReplyId: String
  post: Post!
  postID: String!
  replies: [PostReply!]!
  totalReplies: Int
}

type PostResponse {
  errors: [FieldError!]
  post: Post
}

type Query {
  me: User
  myPosts: [Post!]!
  user(id: Int!): User!
  users: [User!]!
}

type RegisterResponse {
  accessToken: String
  errors: [FieldError!]
  refreshToken: String
}

type User {
  cell: LocationCell
  cellID: Int
  createdAt: DateTime!
  email: String!
  firstName: String!
  hasTempPassword: Boolean
  id: Int!
  isVerified: Boolean
  lastActiveAt: DateTime!
  lastName: String!
  likes: [Like!]
  media: [Media!]
  posts: [Post!]
  profilePic: String
  role: UserRoles
  screenName: String!
  status: UserStatuses
  tempPasswordExpires: DateTime
  totalFollowers: Int
  totalFollowing: Int
  totalFollowingPlaces: Int
  totalLikes: Int
  totalPosts: Int
  verificationType: UserVerifications
}

input UserCheckEmailScreenNameInputs {
  email: String!
  screenName: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserRegisterInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  repassword: String!
  screenName: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

enum UserRoles {
  ADMIN
  USER
}

enum UserStatuses {
  ACTIVE
  ARCHIVE
  DEACTIVATED
  INACTIVE
  INVITED
  REMOVED
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
}

enum UserVerifications {
  CELEBRITY
  DEVELOPER
  OFFICIAL
  STANDARD
}
