// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  USER
  ADMIN
}

enum UserStatuses {
  INVITED
  ACTIVE
  INACTIVE
  ARCHIVE
  DEACTIVATED
  REMOVED
}

enum UserVerifications {
  STANDARD
  CELEBRITY
  OFFICIAL
  DEVELOPER
}

enum MediaTypes {
  VIDEO
  PHOTO
  AUDIO
  MODEL
}

enum MediaExtensions {
  PNG
  JPG
  JPEG
  BMP
  MP4
  AVI
  FBX
  USDZ
  GLTF
}

enum PlaceTypes {
  Transit // road, intersection, railway
  Residential // house
  Commercial // store
  Educational // school, university
  Medical // hospital
  Religious // church
  Community // neighborhood, group of people
  Municipality // city, town, village
  Administrative // government building, district
  State
  Province
  Country
  Continent
  Geographic
  Landmark
}

enum LocationTypes {
  Place
  User
}

model User {
  id                   Int                @id @default(autoincrement())
  email                String             @unique
  firstName            String             @db.VarChar(200)
  lastName             String             @db.VarChar(200)
  screenName           String             @db.VarChar(200)
  password             String
  tempPassword         String?
  tempPasswordExpires  DateTime?
  hasTempPassword      Boolean            @default(false)
  tokenVersion         Int                @default(0)
  profilePic           String?
  role                 UserRoles          @default(USER)
  status               UserStatuses       @default(ACTIVE)
  isVerified           Boolean            @default(false)
  verificationType     UserVerifications  @default(STANDARD)
  locationID           Int?
  location             Location?          @relation(fields: [locationID], references: [id])
  posts                Post[]
  postReplies          PostReply[]
  totalPosts           Int                @default(0)
  likes                Like[]
  locationPath         UserLocationPath[]
  visitHistory         UserVisitHistory[]
  totalLikes           Int                @default(0)
  totalFollowers       Int                @default(0)
  totalFollowing       Int                @default(0)
  totalFollowingPlaces Int                @default(0)
  lastActiveAt         DateTime           @default(now())
  createdAt            DateTime           @default(now())

  @@map("users")
}

model UserVisitHistory {
  id       Int      @id @default(autoincrement())
  userID   Int
  user     User     @relation(fields: [userID], references: [id])
  placeID  Int
  place    Place    @relation(fields: [placeID], references: [id])
  departAt DateTime
  arriveAt DateTime @default(now())

  @@map("user_visit_histories")
}

model UserLocationPath {
  id           Int      @id @default(autoincrement())
  userID       Int
  user         User     @relation(fields: [userID], references: [id])
  geoCell      String
  geoCellLevel Int
  createdAt    DateTime @default(now())

  @@map("user_location_paths")
}

model Friend {
  id Int @id @default(autoincrement())

  @@map("friends")
}

model Follower {
  id Int @id @default(autoincrement())

  @@map("followers")
}

model Post {
  id         Int         @id @default(autoincrement())
  authorID   Int
  author     User        @relation(fields: [authorID], references: [id])
  locationID Int
  location   Location    @relation(fields: [locationID], references: [id])
  placeID    Int?
  place      Place?      @relation(fields: [placeID], references: [id])
  text       String?
  media      Media[]
  createdAt  DateTime    @default(now())
  replies    PostReply[]
  replyCount Int         @default(0)
  likes      Like[]
  likeCount  Int         @default(0)

  @@map("posts")
}

model PostReply {
  id       Int    @id @default(autoincrement())
  postID   Int
  post     Post   @relation(fields: [postID], references: [id])
  authorID Int
  author   User   @relation(fields: [authorID], references: [id])
  text     String

  @@map("post_replies")
}

model Media {
  id         Int             @id @default(autoincrement())
  extension  MediaExtensions
  mediaType  MediaTypes
  postID     Int
  post       Post            @relation(fields: [postID], references: [id])
  mediaURL   String
  mediaIndex Int             @default(0)
  createdAt  DateTime        @default(now())

  @@map("media")
}

model Like {
  id      Int  @id @default(autoincrement())
  likerID Int
  liker   User @relation(fields: [likerID], references: [id])
  postID  Int
  post    Post @relation(fields: [postID], references: [id])

  @@map("likes")
}

model Place {
  id             Int                @id @default(autoincrement())
  name           String             @db.VarChar(200)
  language       String             @default("en") @db.VarChar(3)
  placeType      PlaceTypes
  locationID     Int?
  location       Location?          @relation(fields: [locationID], references: [id])
  parentID       Int?
  parent         Place?             @relation("PlaceHierarchy", fields: [parentID], references: [id])
  children       Place[]            @relation("PlaceHierarchy")
  addressID      Int?
  address        Address?           @relation(fields: [addressID], references: [id])
  peopleHere     Int                @default(0)
  references     Json?
  categories     Json?
  contacts       Json?
  hours          Json?
  organizationID Int?
  organization   Organization?      @relation(fields: [organizationID], references: [id])
  updatedAt      DateTime           @default(now())
  createdAt      DateTime           @default(now())
  posts          Post[]
  visitorHistory UserVisitHistory[]

  @@index([name], type: Hash)
  @@map("places")
}

model PlaceFavorite {
  id Int @id @default(autoincrement())

  @@map("place_favorites")
}

model Address {
  id          Int     @id @default(autoincrement())
  countryCode String  @db.VarChar(100)
  countryName String  @db.VarChar(100)
  stateCode   String? @db.VarChar(100)
  state       String? @db.VarChar(100)
  county      String? @db.VarChar(100)
  city        String? @db.VarChar(100)
  district    String? @db.VarChar(100)
  street      String? @db.VarChar(100)
  postalCode  String? @db.VarChar(100)
  houseNumber String? @db.VarChar(100)
  places      Place[]

  @@map("addresses")
}

model Location {
  id               Int           @id @default(autoincrement())
  locationType     LocationTypes
  primaryCellLevel Int
  lat              Float
  lon              Float
  geoCellRes0      String        @db.VarChar(30)
  geoCellRes1      String        @db.VarChar(30)
  geoCellRes2      String        @db.VarChar(30)
  geoCellRes3      String        @db.VarChar(30)
  geoCellRes4      String        @db.VarChar(30)
  geoCellRes5      String        @db.VarChar(30)
  geoCellRes6      String        @db.VarChar(30)
  geoCellRes7      String        @db.VarChar(30)
  geoCellRes8      String        @db.VarChar(30)
  geoCellRes9      String        @db.VarChar(30)
  geoCellRes10     String        @db.VarChar(30)
  geoCellRes11     String        @db.VarChar(30)
  geoCellRes12     String        @db.VarChar(30)
  geoCellRes13     String        @db.VarChar(30)
  geoCellRes14     String        @db.VarChar(30)
  geoCellRes15     String        @db.VarChar(30)
  bbox             Json?
  accessPoints     Json?
  updatedAt        DateTime      @default(now())
  createdAt        DateTime      @default(now())
  users            User[]
  posts            Post[]
  places           Place[]

  @@index([geoCellRes0], type: Hash)
  @@index([geoCellRes1], type: Hash)
  @@index([geoCellRes2], type: Hash)
  @@index([geoCellRes3], type: Hash)
  @@index([geoCellRes4], type: Hash)
  @@index([geoCellRes5], type: Hash)
  @@index([geoCellRes6], type: Hash)
  @@index([geoCellRes7], type: Hash)
  @@index([geoCellRes8], type: Hash)
  @@index([geoCellRes9], type: Hash)
  @@index([geoCellRes10], type: Hash)
  @@index([geoCellRes11], type: Hash)
  @@index([geoCellRes12], type: Hash)
  @@index([geoCellRes13], type: Hash)
  @@index([geoCellRes14], type: Hash)
  @@index([geoCellRes15], type: Hash)
  @@map("locations")
}

model Organization {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(200)
  places Place[]

  @@map("organizations")
}
